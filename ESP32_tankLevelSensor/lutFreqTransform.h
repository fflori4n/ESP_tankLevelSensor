const double freq2mmsLUT[] = {
  15330  , 1000.96 ,
  15360 , 997.28  ,
  15380 , 993.6 ,
  15410 , 989.92  ,
  15490 , 986.24  ,
  15510 , 982.56  ,
  15540 , 978.88  ,
  15580 , 975.2 ,
  15620 , 971.52  ,
  15640 , 967.84  ,
  15700 , 964.16  ,
  15750 , 960.48  ,
  15910 , 956.8 ,
  15950 , 953.12  ,
  15980 , 949.44  ,
  16020 , 945.76  ,
  16050 , 942.08  ,
  16070 , 938.4 ,
  16120 , 934.72  ,
  16150 , 931.04  ,
  16190 , 927.36  ,
  16230 , 923.68  ,
  16290 , 920 ,
  16330 , 916.32  ,
  16410 , 912.64  ,
  16470 , 908.96  ,
  16560 , 905.28  ,
  16600 , 901.6 ,
  16660 , 897.92  ,
  16700 , 894.24  ,
  16740 , 890.56  ,
  16770 , 886.88  ,
  16810 , 883.2 ,
  16860 , 879.52  ,
  16920 , 875.84  ,
  16950 , 872.16  ,
  17000 , 868.48  ,
  17050 , 864.8 ,
  17090 , 861.12  ,
  17190 , 857.44  ,
  17350 , 853.76  ,
  17390 , 850.08  ,
  17460 , 846.4 ,
  17520 , 842.72  ,
  17550 , 839.04  ,
  17580 , 835.36  ,
  17620 , 831.68  ,
  17640 , 828 ,
  17670 , 824.32  ,
  17720 , 820.64  ,
  17770 , 816.96  ,
  17880 , 813.28  ,
  17950 , 809.6 ,
  18000 , 805.92  ,
  18140 , 802.24  ,
  18180 , 798.56  ,
  18220 , 794.88  ,
  18260 , 791.2 ,
  18290 , 787.52  ,
  18350 , 783.84  ,
  18390 , 780.16  ,
  18430 , 776.48  ,
  18480 , 772.8 ,
  18580 , 769.12  ,
  18630 , 765.44  ,
  18710 , 761.76  ,
  18770 , 758.08  ,
  18840 , 754.4 ,
  19020 , 750.72  ,
  19120 , 747.04  ,
  19160 , 743.36  ,
  19180 , 739.68  ,
  19280 , 736 ,
  19330 , 732.32  ,
  19410 , 728.64  ,
  19460 , 724.96  ,
  19520 , 721.28  ,
  19580 , 717.6 ,
  19620 , 713.92  ,
  19670 , 710.24  ,
  19770 , 706.56  ,
  19820 , 702.88  ,
  19970 , 699.2 ,
  20070 , 695.52  ,
  20150 , 691.84  ,
  20210 , 688.16  ,
  20310 , 684.48  ,
  20380 , 680.8 ,
  20430 , 677.12  ,
  20480 , 673.44  ,
  20530 , 669.76  ,
  20580 , 666.08  ,
  20680 , 662.4 ,
  20760 , 658.72  ,
  20850 , 655.04  ,
  21000 , 651.36  ,
  21120 , 647.68  ,
  21200 , 644 ,
  21260 , 640.32  ,
  21310 , 636.64  ,
  21380 , 632.96  ,
  21480 , 629.28  ,
  21630 , 625.6 ,
  21690 , 621.92  ,
  21750 , 618.24  ,
  21820 , 614.56  ,
  21860 , 610.88  ,
  21990 , 607.2 ,
  22110 , 603.52  ,
  22290 , 599.84  ,
  22400 , 596.16  ,
  22470 , 592.48  ,
  22530 , 588.8 ,
  22590 , 585.12  ,
  22670 , 581.44  ,
  22780 , 577.76  ,
  22870 , 574.08  ,
  22950 , 570.4 ,
  23030 , 566.72  ,
  23130 , 563.04  ,
  23290 , 559.36  ,
  23370 , 555.68  ,
  23490 , 552 ,
  23770 , 548.32  ,
  23910 , 544.64  ,
  23990 , 540.96  ,
  24080 , 537.28  ,
  24170 , 533.6 ,
  24240 , 529.92  ,
  24410 , 526.24  ,
  24490 , 522.56  ,
  24560 , 518.88  ,
  24650 , 515.2 ,
  24710 , 511.52  ,
  24840 , 507.84  ,
  25020 , 504.16  ,
  25140 , 500.48  ,
  25270 , 496.8 ,
  25510 , 493.12  ,
  25590 , 489.44  ,
  25660 , 485.76  ,
  25740 , 482.08  ,
  25900 , 478.4 ,
  26050 , 474.72  ,
  26140 , 471.04  ,
  26240 , 467.36  ,
  26410 , 463.68  ,
  26510 , 460 ,
  26620 , 456.32  ,
  26820 , 452.64  ,
  26980 , 448.96  ,
  27230 , 445.28  ,
  27570 , 441.6 ,
  27700 , 437.92  ,
  27800 , 434.24  ,
  27940 , 430.56  ,
  28080 , 426.88  ,
  28250 , 423.2 ,
  28380 , 419.52  ,
  28480 , 415.84  ,
  28630 , 412.16  ,
  28790 , 408.48  ,
  28920 , 404.8 ,
  29120 , 401.12  ,
  29300 , 397.44  ,
  29540 , 393.76  ,
  29730 , 390.08  ,
  29940 , 386.4 ,
  30060 , 382.72  ,
  30270 , 379.04  ,
  30420 , 375.36  ,
  30630 , 371.68  ,
  30820 , 368 ,
  30980 , 364.32  ,
  31130 , 360.64  ,
  31270 , 356.96  ,
  31440 , 353.28  ,
  31730 , 349.6 ,
  32220 , 345.92  ,
  32520 , 342.24  ,
  32730 , 338.56  ,
  33100 , 334.88  ,
  33270 , 331.2 ,
  33480 , 327.52  ,
  33700 , 323.84  ,
  33910 , 320.16  ,
  34140 , 316.48  ,
  34310 , 312.8 ,
  34550 , 309.12  ,
  34850 , 305.44  ,
  35070 , 301.76  ,
  35290 , 298.08  ,
  35750 , 294.4 ,
  36100 , 290.72  ,
  36280 , 287.04  ,
  36480 , 283.36  ,
  36670 , 279.68  ,
  36860 , 276 ,
  37020 , 272.32  ,
  37180 , 268.64  ,
  37640 , 264.96  ,
  38040 , 261.28  ,
  38250 , 257.6 ,
  38590 , 253.92  ,
  38970 , 250.24  ,
  39440 , 246.56  ,
  40730 , 242.88  ,
  41040 , 239.2 ,
  41340 , 235.52  ,
  41720 , 231.84  ,
  42030 , 228.16  ,
  42320 , 224.48  ,
  42670 , 220.8 ,
  42970 , 217.12  ,
  43330 , 213.44  ,
  43660 , 209.76  ,
  44000 , 206.08  ,
  44450 , 202.4 ,
  45240 , 198.72  ,
  45630 , 195.04  ,
  46050 , 191.36  ,
  46450 , 187.68  ,
  46860 , 184 ,
  47270 , 180.32  ,
  47840 , 176.64  ,
  48260 , 172.96  ,
  48740 , 169.28  ,
  49120 , 165.6 ,
  49420 , 161.92  ,
  49910 , 158.24  ,
  50330 , 154.56  ,
  51110 , 150.88  ,
  53120 , 147.2 ,
  54470 , 143.52  ,
  55030 , 139.84  ,
  55590 , 136.16  ,
  56210 , 132.48  ,
  56880 , 128.8 ,
  57570 , 125.12  ,
  58360 , 121.44  ,
  59070 , 117.76  ,
  59700 , 114.08  ,
  60370 , 110.4 ,
  61170 , 106.72  ,
  61970 , 103.04  ,
  63200 , 99.36 ,
  64170 , 95.68 ,
  65050 , 92  ,
  65930 , 88.32 ,
  67140 , 84.64 ,
  68480 , 80.96 ,
  69440 , 77.28 ,
  70400 , 73.6  ,
  71250 , 69.92 ,
  72220 , 66.24 ,
  73310 , 62.56 ,
  74970 , 58.88 ,
  77210 , 55.2  ,
  83640 , 51.52 ,
  87970 , 47.84 ,
  90080 , 44.16 ,
  92410 , 40.48 ,
  93490 , 36.8  ,
  95090 , 33.12 ,
  95600 , 29.44 ,
  95690 , 25.76 ,
  95720 , 22.08 ,
  95970 , 18.4  ,
  96060 , 14.72 ,
  96160 , 11.04 ,
  96230 , 7.36  ,
  96300 , 3.68,
  96320 , 0
};
const double mms2correctedmmsLUT[] = {
  3  , 0 ,
  52  , 50  ,
  93  , 100 ,
  134 , 150 ,
  166 , 200 ,
  212 , 250 ,
  247 , 300 ,
  295 , 350 ,
  342 , 400 ,
  380 , 450 ,
  423 , 500 ,
  462 , 550 ,
  510 , 600 ,
  558 , 650 ,
  607 , 700 ,
  655 , 750 ,
  702 , 800 ,
  752 , 850 ,
  804 , 900 ,
  855 , 950 ,
  900 , 1000
};

double getLUTmms(double in, const bool correction, bool verboseFlag = true) {
  double out = -999;

  if ( in < 1) {      /// if sensor reads 0Hz, probe is not connected or faulty, return error
    return -999;      /// return negative num. to signal no con error - TODO: handle this in liquidLevel.h
  }

  int lutLen = sizeof(freq2mmsLUT) / sizeof(freq2mmsLUT[0]);

  if (in >= freq2mmsLUT[(lutLen - 2)]) { /// check if LUT contains in
    out = freq2mmsLUT[(lutLen - 1)];
  } else if (in < freq2mmsLUT[0]) {
    out = freq2mmsLUT[1];
  } else {
    for (int i = 0; i < lutLen - 2; i += 2) {                               /// Loop over LUT, get two points next to each other
      if (in > freq2mmsLUT[i] && in <= freq2mmsLUT[ i + 2 ]) {               /// if measured value is between the two points
        double percent = (in - freq2mmsLUT[i]) / (freq2mmsLUT[i + 2] - freq2mmsLUT[i]);
        out = freq2mmsLUT[ i + 1 ] + ((freq2mmsLUT[ i + 3 ] - freq2mmsLUT[ i + 1 ]) * percent);
        break;
      }
    }
  }

  if (!correction) {
    if (verboseFlag) {
      Serial.println("Freq -> mm's");
      Serial.print("Freq:\t\t");
      Serial.print(in);
      Serial.print(" LUT Out:\t\t");
      Serial.println(out);
    }

    return out;
  }

  if (verboseFlag) {
      Serial.println("Freq -> mm's");
      Serial.print("Freq:\t\t");
      Serial.print(in);
      Serial.print(" LUT Out:\t\t");
      Serial.println(out);
  }
  in=out;
  lutLen = sizeof(mms2correctedmmsLUT) / sizeof(mms2correctedmmsLUT[0]);

  if (in >= mms2correctedmmsLUT[(lutLen - 2)]) { /// check if LUT contains in
    out = mms2correctedmmsLUT[(lutLen - 1)];
  } else if (in < mms2correctedmmsLUT[0]) {
    out = mms2correctedmmsLUT[1];
  } else {
    for (int i = 0; i < lutLen - 2; i += 2) {                               /// Loop over LUT, get two points next to each other
      if (in > mms2correctedmmsLUT[i] && in <= mms2correctedmmsLUT[ i + 2 ]) {               /// if measured value is between the two points
        double percent = (in - mms2correctedmmsLUT[i]) / (mms2correctedmmsLUT[i + 2] - mms2correctedmmsLUT[i]);
        out = mms2correctedmmsLUT[ i + 1 ] + ((mms2correctedmmsLUT[ i + 3 ] - mms2correctedmmsLUT[ i + 1 ]) * percent);
        break;
      }
    }
  }

  if (verboseFlag) {
      Serial.println("mm's -> corrected");
      Serial.print("mm:\t\t");
      Serial.print(in);
      Serial.print(" LUT Out:\t\t");
      Serial.println(out);
  }

  return out;
}
