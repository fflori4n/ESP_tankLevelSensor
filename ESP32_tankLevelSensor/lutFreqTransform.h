double lut1Outputmms = 0;
double lut2Outputmms = 0;
const double freq2mmsLUT[] = {
15000  , 8000  ,
16700 , 7184  ,
16700 , 7168  ,
16700 , 7152  ,
16710 , 7136  ,
16700 , 7120  ,
16450 , 7104  ,
16460 , 7088  ,
16450 , 7071  ,
16450 , 7055  ,
16480 , 7039  ,
16540 , 7023  ,
16600 , 7007  ,
16650 , 6991  ,
16720 , 6975  ,
16810 , 6959  ,
16920 , 6943  ,
17170 , 6927  ,
17250 , 6911  ,
17320 , 6895  ,
17400 , 6879  ,
17480 , 6863  ,
17540 , 6846  ,
17630 , 6830  ,
17720 , 6814  ,
17780 , 6798  ,
17880 , 6782  ,
17960 , 6766  ,
18040 , 6750  ,
18140 , 6734  ,
18260 , 6718  ,
18390 , 6702  ,
18600 , 6686  ,
18740 , 6670  ,
18860 , 6654  ,
18920 , 6638  ,
18950 , 6621  ,
18990 , 6605  ,
19010 , 6589  ,
19070 , 6573  ,
19090 , 6557  ,
19120 , 6541  ,
19150 , 6525  ,
19180 , 6509  ,
19230 , 6493  ,
19290 , 6477  ,
19360 , 6461  ,
19410 , 6445  ,
19510 , 6429  ,
19680 , 6413  ,
19770 , 6396  ,
19870 , 6380  ,
19970 , 6364  ,
20070 , 6348  ,
20200 , 6332  ,
20320 , 6316  ,
20450 , 6300  ,
20580 , 6284  ,
20690 , 6268  ,
20820 , 6252  ,
20920 , 6236  ,
20990 , 6220  ,
21070 , 6204  ,
21180 , 6188  ,
21260 , 6171  ,
21380 , 6155  ,
21520 , 6139  ,
21670 , 6123  ,
21780 , 6107  ,
21870 , 6091  ,
21970 , 6075  ,
22080 , 6059  ,
22180 , 6043  ,
22270 , 6027  ,
22380 , 6011  ,
22510 , 5995  ,
22700 , 5979  ,
22830 , 5963  ,
22910 , 5946  ,
23000 , 5930  ,
23140 , 5914  ,
23260 , 5898  ,
23370 , 5882  ,
23480 , 5866  ,
23650 , 5850  ,
23790 , 5834  ,
23990 , 5818  ,
24170 , 5802  ,
24240 , 5786  ,
24390 , 5770  ,
24590 , 5754  ,
24770 , 5738  ,
24920 , 5721  ,
25130 , 5705  ,
25280 , 5689  ,
25390 , 5673  ,
25470 , 5657  ,
25530 , 5641  ,
25580 , 5625  ,
25670 , 5609  ,
25590 , 5593  ,
25890 , 5577  ,
26020 , 5561  ,
26150 , 5545  ,
26340 , 5529  ,
26490 , 5513  ,
26750 , 5496  ,
26980 , 5480  ,
27230 , 5464  ,
27380 , 5448  ,
27560 , 5432  ,
27700 , 5416  ,
27790 , 5400  ,
27930 , 5384  ,
28130 , 5368  ,
28280 , 5352  ,
28410 , 5336  ,
28580 , 5320  ,
28780 , 5304  ,
28910 , 5288  ,
29070 , 5271  ,
29250 , 5255  ,
29520 , 5239  ,
29720 , 5223  ,
29850 , 5207  ,
29960 , 5191  ,
30110 , 5175  ,
30270 , 5159  ,
30490 , 5143  ,
30650 , 5127  ,
30860 , 5111  ,
31110 , 5095  ,
31330 , 5079  ,
31550 , 5063  ,
31740 , 5046  ,
31910 , 5030  ,
32130 , 5014  ,
32320 , 4998  ,
32470 , 4982  ,
32680 , 4966  ,
32870 , 4950  ,
33180 , 4934  ,
33480 , 4918  ,
33680 , 4902  ,
33910 , 4886  ,
34120 , 4870  ,
34320 , 4854  ,
34540 , 4838  ,
34820 , 4821  ,
35030 , 4805  ,
35240 , 4789  ,
35430 , 4773  ,
35670 , 4757  ,
36230 , 4741  ,
36620 , 4725  ,
36990 , 4709  ,
37340 , 4693  ,
37680 , 4677  ,
37860 , 4661  ,
38090 , 4645  ,
38260 , 4629  ,
38350 , 4613  ,
38460 , 4596  ,
38630 , 4580  ,
38840 , 4564  ,
39090 , 4548  ,
39330 , 4532  ,
39610 , 4516  ,
40170 , 4500  ,
40540 , 4484  ,
40830 , 4468  ,
41120 , 4452  ,
41380 , 4436  ,
41730 , 4420  ,
42010 , 4404  ,
42260 , 4388  ,
42570 , 4371  ,
42870 , 4355  ,
43160 , 4339  ,
43450 , 4323  ,
43950 , 4307  ,
44510 , 4291  ,
45040 , 4275  ,
45300 , 4259  ,
45730 , 4243  ,
46050 , 4227  ,
46480 , 4211  ,
46890 , 4195  ,
47240 , 4179  ,
47540 , 4163  ,
47840 , 4146  ,
48190 , 4130  ,
48630 , 4114  ,
49110 , 4098  ,
49530 , 4082  ,
49960 , 4066  ,
50480 , 4050  ,
50750 , 4034  ,
51010 , 4018  ,
51380 , 4002  ,
51760 , 3986  ,
52540 , 3970  ,
52950 , 3954  ,
53310 , 3938  ,
53620 , 3921  ,
53910 , 3905  ,
54290 , 3889  ,
54640 , 3873  ,
55040 , 3857  ,
55710 , 3841  ,
56300 , 3825  ,
56830 , 3809  ,
57730 , 3793  ,
58250 , 3777  ,
58680 , 3761  ,
59210 , 3745  ,
59850 , 3729  ,
60820 , 3713  ,
61370 , 3696  ,
61860 , 3680  ,
62340 , 3664  ,
62970 , 3648  ,
63490 , 3632  ,
63910 , 3616  ,
64360 , 3600  ,
64920 , 3584  ,
65530 , 3568  ,
66110 , 3552  ,
66980 , 3536  ,
67610 , 3520  ,
68270 , 3504  ,
68790 , 3488  ,
69340 , 3471  ,
70310 , 3455  ,
71150 , 3439  ,
71900 , 3423  ,
72730 , 3407  ,
73280 , 3391  ,
73860 , 3375  ,
74500 , 3359  ,
75170 , 3343  ,
75810 , 3327  ,
76440 , 3311  ,
76960 , 3295  ,
77880 , 3279  ,
79210 , 3263  ,
80700 , 3246  ,
82410 , 3230  ,
83900 , 3214  ,
85780 , 3198  ,
88470 , 3182  ,
88440 , 3166  ,
90160 , 3150  ,
90190 , 3134  ,
90230 , 3118  ,
38300 , 3102  ,
38440 , 3086  ,
38550 , 3070  ,
38690 , 3054  ,
38780 , 3038  ,
38970 , 3021  ,
39150 , 3005  ,
39510 , 2989  ,
39640 , 2973  ,
39790 , 2957  ,
39990 , 2941  ,
40190 , 2925  ,
40360 , 2909  ,
40510 , 2893  ,
40620 , 2877  ,
41250 , 2861  ,
41540 , 2845  ,
41750 , 2829  ,
41960 , 2813  ,
42100 , 2796  ,
42250 , 2780  ,
42310 , 2764  ,
42790 , 2748  ,
43000 , 2732  ,
43200 , 2716  ,
43370 , 2700  ,
43570 , 2684  ,
43760 , 2668  ,
44030 , 2652  ,
44290 , 2636  ,
44480 , 2620  ,
44640 , 2604  ,
44850 , 2588  ,
45120 , 2571  ,
45330 , 2555  ,
45560 , 2539  ,
45760 , 2523  ,
45960 , 2507  ,
46400 , 2491  ,
46720 , 2475  ,
46960 , 2459  ,
47120 , 2443  ,
47320 , 2427  ,
47560 , 2411  ,
47750 , 2395  ,
48040 , 2379  ,
48220 , 2363  ,
48390 , 2346  ,
48670 , 2330  ,
48930 , 2314  ,
49150 , 2298  ,
49410 , 2282  ,
49630 , 2266  ,
49860 , 2250  ,
50260 , 2234  ,
50510 , 2218  ,
50710 , 2202  ,
50990 , 2186  ,
51250 , 2170  ,
51540 , 2154  ,
51910 , 2138  ,
52170 , 2121  ,
53370 , 2105  ,
53850 , 2089  ,
54180 , 2073  ,
54430 , 2057  ,
54660 , 2041  ,
54930 , 2025  ,
55610 , 2009  ,
55970 , 1993  ,
56280 , 1977  ,
56580 , 1961  ,
56910 , 1945  ,
57160 , 1929  ,
57410 , 1913  ,
57650 , 1896  ,
57880 , 1880  ,
58160 , 1864  ,
58610 , 1848  ,
58940 , 1832  ,
59330 , 1816  ,
59840 , 1800  ,
60210 , 1784  ,
60630 , 1768  ,
61010 , 1752  ,
61340 , 1736  ,
61830 , 1720  ,
62330 , 1704  ,
62750 , 1688  ,
63090 , 1671  ,
63470 , 1655  ,
63790 , 1639  ,
64060 , 1623  ,
64410 , 1607  ,
64760 , 1591  ,
65130 , 1575  ,
65670 , 1559  ,
66090 , 1543  ,
66530 , 1527  ,
66920 , 1511  ,
67320 , 1495  ,
67730 , 1479  ,
68220 , 1463  ,
68750 , 1446  ,
70370 , 1430  ,
71000 , 1414  ,
71530 , 1398  ,
71990 , 1382  ,
72370 , 1366  ,
72780 , 1350  ,
73190 , 1334  ,
73610 , 1318  ,
74170 , 1302  ,
76860 , 1286  ,
78230 , 1270  ,
79060 , 1254  ,
80340 , 1238  ,
84680 , 1221  ,
86100 , 1205  ,
87070 , 1189  ,
87770 , 1173  ,
88320 , 1157  ,
88690 , 1141  ,
89590 , 1125  ,
90130 , 1109  ,
90470 , 1093  ,
90740 , 1077  ,
90910 , 1061  ,
90990 , 1045  ,
91010 , 1029  ,
91060 , 1013  ,
91160 , 996 ,
91230 , 980 ,
91280 , 964 ,
91450 , 948 ,
91550 , 932 ,
91600 , 916 ,
91640 , 900 ,
91630 , 884 ,
91400 , 868 ,
90970 , 852 ,
91010 , 836 ,
91080 , 820 ,
91150 , 804 ,
68670 , 788 ,
69230 , 771 ,
70190 , 755 ,
70140 , 739 ,
70440 , 723 ,
71090 , 707 ,
71600 , 691 ,
72420 , 675 ,
73720 , 659 ,
74330 , 643 ,
74710 , 627 ,
75150 , 611 ,
75500 , 595 ,
75830 , 579 ,
76080 , 563 ,
76580 , 546 ,
77020 , 530 ,
77660 , 514 ,
80620 , 498 ,
81800 , 482 ,
83000 , 466 ,
83870 , 450 ,
85060 , 434 ,
87070 , 418 ,
89930 , 402 ,
90800 , 386 ,
91430 , 370 ,
91930 , 354 ,
92440 , 338 ,
93320 , 321 ,
93920 , 305 ,
94390 , 289 ,
94640 , 273 ,
94830 , 257 ,
94960 , 241 ,
95050 , 225 ,
95110 , 209 ,
95160 , 193 ,
95210 , 177 ,
95270 , 161 ,
95300 , 145 ,
95350 , 129 ,
95440 , 113 ,
99520 , 96  ,
95580 , 80  ,
95640 , 64  ,
95700 , 48  ,
95740 , 32  ,
95750 , 16  ,
95630 , 0 ,
 
};
const double mms2correctedmmsLUT[] = {
  3200 , 0 ,
  3450, 50  ,
  3725 , 100 ,
  3970 , 150 ,
  4210 , 200 ,
  4420 , 250 ,
  4650 , 300 ,
  4830 , 350 ,
  5020 , 400 ,
  5220 , 450 ,
  5400 , 500 ,
  5570 , 550 ,
  5740 , 600 ,
  5900 , 650 ,
  6070 , 700 ,
  6220 , 750 ,
  6380 , 800 ,
  6580 , 850 ,
  6720 , 900 ,
  6855 , 950 ,
  6930 , 1000,
  6950,1040
};

double getLUTmms(double in, const bool correction, bool verboseFlag = true) {
  double out = -999;

  if ( in < 1) {      /// if sensor reads 0Hz, probe is not connected or faulty, return error
    return -999;      /// return negative num. to signal no con error - TODO: handle this in liquidLevel.h
  }

  int lutLen = sizeof(freq2mmsLUT) / sizeof(freq2mmsLUT[0]);

  if (in >= freq2mmsLUT[(lutLen - 2)]) { /// check if LUT contains in
    out = freq2mmsLUT[(lutLen - 1)];
  } else if (in < freq2mmsLUT[0]) {
    out = freq2mmsLUT[1];
  } else {
    for (int i = 0; i < lutLen - 2; i += 2) {                               /// Loop over LUT, get two points next to each other
      if (in > freq2mmsLUT[i] && in <= freq2mmsLUT[ i + 2 ]) {               /// if measured value is between the two points
        double percent = (in - freq2mmsLUT[i]) / (freq2mmsLUT[i + 2] - freq2mmsLUT[i]);
        out = freq2mmsLUT[ i + 1 ] + ((freq2mmsLUT[ i + 3 ] - freq2mmsLUT[ i + 1 ]) * percent);
        break;
      }
    }
  }

  if (!correction) {
    if (verboseFlag) {
      Serial.println("Freq -> mm's");
      Serial.print("Freq:\t\t");
      Serial.print(in);
      Serial.print(" LUT Out:\t\t");
      Serial.println(out);
    }

    return out;
  }

  if (verboseFlag) {
      Serial.println("Freq -> mm's");
      Serial.print("Freq:\t\t");
      Serial.print(in);
      Serial.print(" LUT Out:\t\t");
      Serial.println(out);
  }
  lut1Outputmms = out;
  in=out;
  lutLen = sizeof(mms2correctedmmsLUT) / sizeof(mms2correctedmmsLUT[0]);

  if (in >= mms2correctedmmsLUT[(lutLen - 2)]) { /// check if LUT contains in
    out = mms2correctedmmsLUT[(lutLen - 1)];
  } else if (in < mms2correctedmmsLUT[0]) {
    out = mms2correctedmmsLUT[1];
  } else {
    for (int i = 0; i < lutLen - 2; i += 2) {                               /// Loop over LUT, get two points next to each other
      if (in > mms2correctedmmsLUT[i] && in <= mms2correctedmmsLUT[ i + 2 ]) {               /// if measured value is between the two points
        double percent = (in - mms2correctedmmsLUT[i]) / (mms2correctedmmsLUT[i + 2] - mms2correctedmmsLUT[i]);
        out = mms2correctedmmsLUT[ i + 1 ] + ((mms2correctedmmsLUT[ i + 3 ] - mms2correctedmmsLUT[ i + 1 ]) * percent);
        break;
      }
    }
  }

  if (verboseFlag) {
      Serial.println("mm's -> corrected");
      Serial.print("mm:\t\t");
      Serial.print(in);
      Serial.print(" LUT Out:\t\t");
      Serial.println(out);
  }

  lut2Outputmms = out;
  return out;
}
