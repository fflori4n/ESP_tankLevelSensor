double lut1Outputmms = 0;
double lut2Outputmms = 0;
const double freq2mmsLUT[] = {
15820  , 8000.07 ,
15820 , 7999.36 ,
15820 , 7963.76 ,
15830 , 7928.24 ,
15840 , 7892.09 ,
15830 , 7856.73 ,
15840 , 7820.75 ,
15830 , 7785.55 ,
15830 , 7749.73 ,
15820 , 7714.69 ,
15840 , 7679.04 ,
15850 , 7643.46 ,
15870 , 7608.66 ,
15900 , 7573.95 ,
15920 , 7539.31 ,
15930 , 7504.75 ,
15960 , 7470.27 ,
15970 , 7435.87 ,
16020 , 7401.55 ,
16070 , 7367.31 ,
16120 , 7333.15 ,
16180 , 7299.07 ,
16260 , 7265.06 ,
16310 , 7230.46 ,
16360 , 7196.62 ,
16450 , 7162.86 ,
16520 , 7129.17 ,
16590 , 7095.57 ,
16640 , 7062.04 ,
16690 , 7028.6  ,
16760 , 6995.23 ,
16820 , 6961.95 ,
16870 , 6928.74 ,
16930 , 6895.61 ,
16960 , 6862.56 ,
17010 , 6829.59 ,
17070 , 6796.7  ,
17150 , 6763.89 ,
17230 , 6731.16 ,
17340 , 6697.86 ,
17450 , 6665.29 ,
17540 , 6632.79 ,
17610 , 6600.38 ,
17650 , 6567.4  ,
17690 , 6535.15 ,
17740 , 6502.34 ,
17810 , 6470.25 ,
17870 , 6437.59 ,
17960 , 6405.66 ,
18030 , 6373.81 ,
18120 , 6342.04 ,
18200 , 6310.35 ,
18260 , 6278.1  ,
18350 , 6246.57 ,
18450 , 6214.49 ,
18550 , 6183.12 ,
18680 , 6151.82 ,
18790 , 6120.61 ,
18910 , 6089.48 ,
19040 , 6058.42 ,
19100 , 6027.45 ,
19150 , 5995.94 ,
19200 , 5965.12 ,
19270 , 5933.77 ,
19350 , 5903.12 ,
19450 , 5872.54 ,
19550 , 5842.05 ,
19700 , 5811.63 ,
19870 , 5781.29 ,
19960 , 5751.04 ,
20060 , 5720.26 ,
20150 , 5689.56 ,
20240 , 5659.54 ,
20340 , 5629.6  ,
20420 , 5599.75 ,
20550 , 5569.37 ,
20670 , 5539.68 ,
20820 , 5510.06 ,
20950 , 5480.52 ,
21100 , 5451.06 ,
21170 , 5421.1  ,
21250 , 5391.8  ,
21390 , 5362  ,
21490 , 5332.28 ,
21600 , 5303.22 ,
21750 , 5274.24 ,
21970 , 5245.34 ,
22090 , 5216.52 ,
22240 , 5187.78 ,
22360 , 5158.55 ,
22470 , 5129.97 ,
22640 , 5101.47 ,
22870 , 5073.05 ,
22970 , 5044.71 ,
23100 , 5016.45 ,
23240 , 4988.27 ,
23500 , 4959.6  ,
23830 , 4931.58 ,
24030 , 4903.64 ,
24220 , 4875.22 ,
24340 , 4846.88 ,
24530 , 4819.18 ,
24910 , 4791.56 ,
25180 , 4764.02 ,
25290 , 4736.01 ,
25330 , 4708.08 ,
25400 , 4680.78 ,
25500 , 4653.55 ,
25560 , 4626.41 ,
25660 , 4599.35 ,
25760 , 4572.37 ,
25890 , 4545.46 ,
26110 , 4518.64 ,
26270 , 4491.89 ,
26440 , 4464.69 ,
26630 , 4438.11 ,
26820 , 4411.6  ,
27110 , 4384.65 ,
27390 , 4357.78 ,
27590 , 4331.51 ,
27820 , 4304.8  ,
28000 , 4278.7  ,
28170 , 4252.68 ,
28530 , 4226.73 ,
28730 , 4200.87 ,
28850 , 4175.08 ,
28980 , 4149.37 ,
29300 , 4123.74 ,
29610 , 4098.2  ,
29790 , 4072.22 ,
30010 , 4046.83 ,
30260 , 4021.02 ,
30500 , 3995.79 ,
30700 , 3970.64 ,
30930 , 3945.57 ,
31270 , 3920.08 ,
31590 , 3895.18 ,
31830 , 3870.35 ,
32110 , 3845.6  ,
32250 , 3820.44 ,
32460 , 3795.85 ,
32640 , 3771.34 ,
33010 , 3746.91 ,
33210 , 3722.55 ,
33440 , 3698.28 ,
33740 , 3673.61 ,
34000 , 3649.5  ,
34280 , 3624.98 ,
34610 , 3601.03 ,
34990 , 3577.16 ,
35240 , 3553.37 ,
35500 , 3529.18 ,
35770 , 3505.08 ,
35970 , 3481.06 ,
36500 , 3457.59 ,
36970 , 3434.2  ,
37570 , 3410.42 ,
37850 , 3387.19 ,
37940 , 3364.04 ,
38030 , 3340.97 ,
38120 , 3317.52 ,
38400 , 3294.61 ,
38640 , 3271.78 ,
38910 , 3249.02 ,
39220 , 3226.35 ,
39430 , 3203.76 ,
40120 , 3180.79 ,
40580 , 3157.91 ,
40920 , 3135.56 ,
41190 , 3113.29 ,
41850 , 3091.1  ,
42190 , 3068.98 ,
42500 , 3046.95 ,
42990 , 3024.99 ,
43320 , 3003.12 ,
43660 , 2980.88 ,
44080 , 2958.74 ,
44430 , 2937.1  ,
44780 , 2915.12 ,
45300 , 2893.64 ,
45720 , 2872.25 ,
46060 , 2850.51 ,
46490 , 2828.85 ,
46950 , 2807.69 ,
47420 , 2786.62 ,
47760 , 2765.21 ,
48130 , 2744.29 ,
48500 , 2723.04 ,
49070 , 2701.88 ,
49490 , 2681.2  ,
50110 , 2660.2  ,
50640 , 2639.69 ,
51560 , 2619.26 ,
51950 , 2598.5  ,
52740 , 2577.82 ,
53450 , 2557.63 ,
54370 , 2537.52 ,
54890 , 2517.08 ,
55370 , 2497.13 ,
55880 , 2476.86 ,
56350 , 2457.07 ,
57000 , 2436.97 ,
57560 , 2417.34 ,
58420 , 2397.4  ,
59120 , 2377.92 ,
59720 , 2358.53 ,
60490 , 2339.22 ,
61270 , 2319.61 ,
61970 , 2300.46 ,
62550 , 2281.38 ,
63160 , 2262.39 ,
63660 , 2243.48 ,
64590 , 2224.27 ,
65310 , 2205.52 ,
66000 , 2186.47 ,
66890 , 2167.88 ,
67990 , 2148.99 ,
69630 , 2130.56 ,
70430 , 2112.21 ,
71450 , 2093.57 ,
72220 , 2075.38 ,
75240 , 2057.27 ,
76900 , 2039.23 ,
81640 , 2021.28 ,
83920 , 2003.41 ,
85370 , 1985.61 ,
86200 , 1967.89 ,
87420 , 1950.26 ,
87970 , 1932.7  ,
87940 , 1915.22 ,
88290 , 1897.82 ,
88530 , 1880.51 ,
88730 , 1862.92 ,
89100 , 1845.76 ,
89230 , 1828.34 ,
89360 , 1811.34 ,
89450 , 1794.09 ,
89500 , 1776.91 ,
89630 , 1760.16 ,
89730 , 1743.48 ,
89830 , 1726.88 ,
89890 , 1710.36 ,
89890 , 1693.6  ,
89940 , 1677.24 ,
89960 , 1660.96 ,
89970 , 1644.76 ,
89990 , 1628.64 ,
90030 , 1612.6  ,
90050 , 1596.32 ,
90090 , 1580.44 ,
90130 , 1564.32 ,
90160 , 1548.6  ,
90190 , 1532.96 ,
90230 , 1517.4  ,
38300 , 1502.53 ,
38440 , 1486.82 ,
38550 , 1471.19 ,
38690 , 1455.64 ,
38780 , 1440.48 ,
38970 , 1425.1  ,
39150 , 1410.09 ,
39510 , 1394.87 ,
39640 , 1380.03 ,
39790 , 1364.97 ,
39990 , 1350.29 ,
40190 , 1335.69 ,
40360 , 1321.17 ,
40510 , 1306.72 ,
40620 , 1292.07 ,
41250 , 1277.5  ,
41540 , 1263.3  ,
41750 , 1249.18 ,
41960 , 1235.13 ,
42100 , 1221.17 ,
42250 , 1207.29 ,
42310 , 1193.48 ,
42790 , 1179.75 ,
43000 , 1166.11 ,
43200 , 1152.27 ,
43370 , 1138.78 ,
43570 , 1125.38 ,
43760 , 1112.05 ,
44030 , 1098.8  ,
44290 , 1085.37 ,
44480 , 1072.28 ,
44640 , 1059.02 ,
44850 , 1046.09 ,
45120 , 1033.24 ,
45330 , 1020.22 ,
45560 , 1007.53 ,
45760 , 994.67  ,
45960 , 982.14  ,
46400 , 969.7 ,
46720 , 957.08  ,
46960 , 944.79  ,
47120 , 932.34  ,
47320 , 920.21  ,
47560 , 908.17  ,
47750 , 896.2 ,
48040 , 884.07  ,
48220 , 872.26  ,
48390 , 860.3 ,
48670 , 848.65  ,
48930 , 837.09  ,
49150 , 825.6 ,
49410 , 813.96  ,
49630 , 802.63  ,
49860 , 791.38  ,
50260 , 780.21  ,
50510 , 768.9 ,
50710 , 757.67  ,
50990 , 746.74  ,
51250 , 735.9 ,
51540 , 725.13  ,
51910 , 714.22  ,
52170 , 703.61  ,
53370 , 692.87  ,
53850 , 682.22  ,
54180 , 671.85  ,
54430 , 661.56  ,
54660 , 651.15  ,
54930 , 641.02  ,
55610 , 630.77  ,
55970 , 620.8 ,
56280 , 610.92  ,
56580 , 601.11  ,
56910 , 591.38  ,
57160 , 581.53  ,
57410 , 571.77  ,
57650 , 562.29  ,
57880 , 552.88  ,
58160 , 543.55  ,
58610 , 534.11  ,
58940 , 524.94  ,
59330 , 515.67  ,
59840 , 506.49  ,
60210 , 497.56  ,
60630 , 488.71  ,
61010 , 479.94  ,
61340 , 471.25  ,
61830 , 462.47  ,
62330 , 453.77  ,
62750 , 445.15  ,
63090 , 436.62  ,
63470 , 428.33  ,
63790 , 420.13  ,
64060 , 411.84  ,
64410 , 403.79  ,
64760 , 395.66  ,
65130 , 387.78  ,
65670 , 379.97  ,
66090 , 372.09  ,
66530 , 364.29  ,
66920 , 356.73  ,
67320 , 349.24  ,
67730 , 341.83  ,
68220 , 334.36  ,
68750 , 326.97  ,
70370 , 319.66  ,
71000 , 312.58  ,
71530 , 305.43  ,
71990 , 298.51  ,
72370 , 291.53  ,
72780 , 284.76  ,
73190 , 277.95  ,
73610 , 271.21  ,
74170 , 264.56  ,
76860 , 258.12  ,
78230 , 251.63  ,
79060 , 245.22  ,
80340 , 239.02  ,
84680 , 232.9 ,
86100 , 226.86  ,
87070 , 220.9 ,
87770 , 215.02  ,
88320 , 209.21  ,
88690 , 203.49  ,
89590 , 197.85  ,
90130 , 192.28  ,
90470 , 186.69  ,
90740 , 181.28  ,
90910 , 175.96  ,
90990 , 170.71  ,
91010 , 165.54  ,
91060 , 160.46  ,
91160 , 155.35  ,
91230 , 150.42  ,
91280 , 145.58  ,
91450 , 140.81  ,
91550 , 136.12  ,
91600 , 131.51  ,
91640 , 126.89  ,
91630 , 122.44  ,
91400 , 118.07  ,
90970 , 113.78  ,
91010 , 109.57  ,
91080 , 105.44  ,
91150 , 101.31  ,
68670 , 97.26 ,
69230 , 93.37 ,
70190 , 89.48 ,
70140 , 85.75 ,
70440 , 82.03 ,
71090 , 78.39 ,
71600 , 74.83 ,
72420 , 71.43 ,
73720 , 68.1  ,
74330 , 64.85 ,
74710 , 61.62 ,
75150 , 58.53 ,
75500 , 55.52 ,
75830 , 52.59 ,
76080 , 49.74 ,
76580 , 46.92 ,
77020 , 44.23 ,
77660 , 41.57 ,
80620 , 39.04 ,
81800 , 36.54 ,
83000 , 34.12 ,
83870 , 31.79 ,
85060 , 29.58 ,
87070 , 27.41 ,
89930 , 25.37 ,
90800 , 23.36 ,
91430 , 21.48 ,
91930 , 19.67 ,
92440 , 17.91 ,
93320 , 16.26 ,
93920 , 14.69 ,
94390 , 13.21 ,
94640 , 11.77 ,
94830 , 10.44 ,
94960 , 9.17  ,
95050 , 7.98  ,
95110 , 6.87  ,
95160 , 5.85  ,
95210 , 4.93  ,
95270 , 4.07  ,
95300 , 3.3 ,
95350 , 2.62  ,
95440 , 2.01  ,
95520 , 1.48  ,
95580 , 1.02  ,
95640 , 0.65  ,
95700 , 0.37  ,
95740 , 0.16  ,
95750 , 0.04  ,
95630 , 0
};
const double mms2correctedmmsLUT[] = {
  12  , 0 ,
  2024 , 50  ,
  2260 , 100 ,
  2550 , 150 ,
  2790 , 200 ,
  3030 , 250 ,
  3280 , 300 ,
  3520 , 350 ,
  3820 , 400 ,
  4016 , 450 ,
  4310 , 500 ,
  4490 , 550 ,
  4800 , 600 ,
  4985 , 650 ,
  5270 , 700 ,
  5560 , 750 ,
  5880 , 800 ,
  6175 , 850 ,
  6490 , 900 ,
  6730 , 950 ,
  7045 , 1000,
  7100,1040
};

double getLUTmms(double in, const bool correction, bool verboseFlag = true) {
  double out = -999;

  if ( in < 1) {      /// if sensor reads 0Hz, probe is not connected or faulty, return error
    return -999;      /// return negative num. to signal no con error - TODO: handle this in liquidLevel.h
  }

  int lutLen = sizeof(freq2mmsLUT) / sizeof(freq2mmsLUT[0]);

  if (in >= freq2mmsLUT[(lutLen - 2)]) { /// check if LUT contains in
    out = freq2mmsLUT[(lutLen - 1)];
  } else if (in < freq2mmsLUT[0]) {
    out = freq2mmsLUT[1];
  } else {
    for (int i = 0; i < lutLen - 2; i += 2) {                               /// Loop over LUT, get two points next to each other
      if (in > freq2mmsLUT[i] && in <= freq2mmsLUT[ i + 2 ]) {               /// if measured value is between the two points
        double percent = (in - freq2mmsLUT[i]) / (freq2mmsLUT[i + 2] - freq2mmsLUT[i]);
        out = freq2mmsLUT[ i + 1 ] + ((freq2mmsLUT[ i + 3 ] - freq2mmsLUT[ i + 1 ]) * percent);
        break;
      }
    }
  }

  if (!correction) {
    if (verboseFlag) {
      Serial.println("Freq -> mm's");
      Serial.print("Freq:\t\t");
      Serial.print(in);
      Serial.print(" LUT Out:\t\t");
      Serial.println(out);
    }

    return out;
  }

  if (verboseFlag) {
      Serial.println("Freq -> mm's");
      Serial.print("Freq:\t\t");
      Serial.print(in);
      Serial.print(" LUT Out:\t\t");
      Serial.println(out);
  }
  lut1Outputmms = out;
  in=out;
  lutLen = sizeof(mms2correctedmmsLUT) / sizeof(mms2correctedmmsLUT[0]);

  if (in >= mms2correctedmmsLUT[(lutLen - 2)]) { /// check if LUT contains in
    out = mms2correctedmmsLUT[(lutLen - 1)];
  } else if (in < mms2correctedmmsLUT[0]) {
    out = mms2correctedmmsLUT[1];
  } else {
    for (int i = 0; i < lutLen - 2; i += 2) {                               /// Loop over LUT, get two points next to each other
      if (in > mms2correctedmmsLUT[i] && in <= mms2correctedmmsLUT[ i + 2 ]) {               /// if measured value is between the two points
        double percent = (in - mms2correctedmmsLUT[i]) / (mms2correctedmmsLUT[i + 2] - mms2correctedmmsLUT[i]);
        out = mms2correctedmmsLUT[ i + 1 ] + ((mms2correctedmmsLUT[ i + 3 ] - mms2correctedmmsLUT[ i + 1 ]) * percent);
        break;
      }
    }
  }

  if (verboseFlag) {
      Serial.println("mm's -> corrected");
      Serial.print("mm:\t\t");
      Serial.print(in);
      Serial.print(" LUT Out:\t\t");
      Serial.println(out);
  }

  lut2Outputmms = out;
  return out;
}
